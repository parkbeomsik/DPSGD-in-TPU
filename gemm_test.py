import jax
import time
import numpy as np
import statistics

gemm_list = [(1, 32, 32, 32),
             (1, 32, 64, 32),
             (1, 32, 128, 32),
             (1, 32, 256, 32),
             (1, 32, 512, 32),
             (1, 32, 1024, 32),
             (1, 32, 2048, 32),
             (1, 32, 4096, 32),
             (1, 32, 8192, 32),
             (1, 32, 16384, 32),
             (1, 32, 32768, 32),
             (1, 64, 32, 64),
             (1, 64, 64, 64),
             (1, 64, 128, 64),
             (1, 64, 256, 64),
             (1, 64, 512, 64),
             (1, 64, 1024, 64),
             (1, 64, 2048, 64),
             (1, 64, 4096, 64),
             (1, 64, 8192, 64),
             (1, 64, 16384, 64),
             (1, 64, 32768, 64),
             (1, 128, 32, 128),
             (1, 128, 64, 128),
             (1, 128, 128, 128),
             (1, 128, 256, 128),
             (1, 128, 512, 128),
             (1, 128, 1024, 128),
             (1, 128, 2048, 128),
             (1, 128, 4096, 128),
             (1, 128, 8192, 128),
             (1, 128, 16384, 128),
             (1, 128, 32768, 128),
             (1, 256, 32, 256),
             (1, 256, 64, 256),
             (1, 256, 128, 256),
             (1, 256, 256, 256),
             (1, 256, 512, 256),
             (1, 256, 1024, 256),
             (1, 256, 2048, 256),
             (1, 256, 4096, 256),
             (1, 256, 8192, 256),
             (1, 256, 16384, 256),
             (1, 256, 32768, 256),
             (1, 512, 32, 512),
             (1, 512, 64, 512),
             (1, 512, 128, 512),
             (1, 512, 256, 512),
             (1, 512, 512, 512),
             (1, 512, 1024, 512),
             (1, 512, 2048, 512),
             (1, 512, 4096, 512),
             (1, 512, 8192, 512),
             (1, 512, 16384, 512),
             (1, 512, 32768, 512),
             (1, 1024, 32, 1024),
             (1, 1024, 64, 1024),
             (1, 1024, 128, 1024),
             (1, 1024, 256, 1024),
             (1, 1024, 512, 1024),
             (1, 1024, 1024, 1024),
             (1, 1024, 2048, 1024),
             (1, 1024, 4096, 1024),
             (1, 1024, 8192, 1024),
             (1, 1024, 16384, 1024),
             (1, 1024, 32768, 1024),
             (1, 2048, 32, 2048),
             (1, 2048, 64, 2048),
             (1, 2048, 128, 2048),
             (1, 2048, 256, 2048),
             (1, 2048, 512, 2048),
             (1, 2048, 1024, 2048),
             (1, 2048, 2048, 2048),
             (1, 2048, 4096, 2048),
             (1, 2048, 8192, 2048),
             (1, 2048, 16384, 2048),
             (1, 2048, 32768, 2048),
             (1, 4096, 32, 4096),
             (1, 4096, 64, 4096),
             (1, 4096, 128, 4096),
             (1, 4096, 256, 4096),
             (1, 4096, 512, 4096),
             (1, 4096, 1024, 4096),
             (1, 4096, 2048, 4096),
             (1, 4096, 4096, 4096),
             (1, 4096, 8192, 4096),
             (1, 4096, 16384, 4096),
             (1, 4096, 32768, 4096),
             (1, 8192, 32, 8192),
             (1, 8192, 64, 8192),
             (1, 8192, 128, 8192),
             (1, 8192, 256, 8192),
             (1, 8192, 512, 8192),
             (1, 8192, 1024, 8192),
             (1, 8192, 2048, 8192),
             (1, 8192, 4096, 8192),
             (1, 8192, 8192, 8192),
             (1, 8192, 16384, 8192),
             (1, 8192, 32768, 8192),
             (1, 16384, 32, 16384),
             (1, 16384, 64, 16384),
             (1, 16384, 128, 16384),
             (1, 16384, 256, 16384),
             (1, 16384, 512, 16384),
             (1, 16384, 1024, 16384),
             (1, 16384, 2048, 16384),
             (1, 16384, 4096, 16384),
             (1, 16384, 8192, 16384),
             (1, 16384, 16384, 16384),
             (4, 32, 32, 32),
             (4, 32, 64, 32),
             (4, 32, 128, 32),
             (4, 32, 256, 32),
             (4, 32, 512, 32),
             (4, 32, 1024, 32),
             (4, 32, 2048, 32),
             (4, 32, 4096, 32),
             (4, 32, 8192, 32),
             (4, 32, 16384, 32),
             (4, 32, 32768, 32),
             (4, 64, 32, 64),
             (4, 64, 64, 64),
             (4, 64, 128, 64),
             (4, 64, 256, 64),
             (4, 64, 512, 64),
             (4, 64, 1024, 64),
             (4, 64, 2048, 64),
             (4, 64, 4096, 64),
             (4, 64, 8192, 64),
             (4, 64, 16384, 64),
             (4, 64, 32768, 64),
             (4, 128, 32, 128),
             (4, 128, 64, 128),
             (4, 128, 128, 128),
             (4, 128, 256, 128),
             (4, 128, 512, 128),
             (4, 128, 1024, 128),
             (4, 128, 2048, 128),
             (4, 128, 4096, 128),
             (4, 128, 8192, 128),
             (4, 128, 16384, 128),
             (4, 128, 32768, 128),
             (4, 256, 32, 256),
             (4, 256, 64, 256),
             (4, 256, 128, 256),
             (4, 256, 256, 256),
             (4, 256, 512, 256),
             (4, 256, 1024, 256),
             (4, 256, 2048, 256),
             (4, 256, 4096, 256),
             (4, 256, 8192, 256),
             (4, 256, 16384, 256),
             (4, 256, 32768, 256),
             (4, 512, 32, 512),
             (4, 512, 64, 512),
             (4, 512, 128, 512),
             (4, 512, 256, 512),
             (4, 512, 512, 512),
             (4, 512, 1024, 512),
             (4, 512, 2048, 512),
             (4, 512, 4096, 512),
             (4, 512, 8192, 512),
             (4, 512, 16384, 512),
             (4, 512, 32768, 512),
             (4, 1024, 32, 1024),
             (4, 1024, 64, 1024),
             (4, 1024, 128, 1024),
             (4, 1024, 256, 1024),
             (4, 1024, 512, 1024),
             (4, 1024, 1024, 1024),
             (4, 1024, 2048, 1024),
             (4, 1024, 4096, 1024),
             (4, 1024, 8192, 1024),
             (4, 1024, 16384, 1024),
             (4, 1024, 32768, 1024),
             (4, 2048, 32, 2048),
             (4, 2048, 64, 2048),
             (4, 2048, 128, 2048),
             (4, 2048, 256, 2048),
             (4, 2048, 512, 2048),
             (4, 2048, 1024, 2048),
             (4, 2048, 2048, 2048),
             (4, 2048, 4096, 2048),
             (4, 2048, 8192, 2048),
             (4, 2048, 16384, 2048),
             (4, 2048, 32768, 2048),
             (4, 4096, 32, 4096),
             (4, 4096, 64, 4096),
             (4, 4096, 128, 4096),
             (4, 4096, 256, 4096),
             (4, 4096, 512, 4096),
             (4, 4096, 1024, 4096),
             (4, 4096, 2048, 4096),
             (4, 4096, 4096, 4096),
             (4, 4096, 8192, 4096),
             (4, 4096, 16384, 4096),
             (4, 8192, 32, 8192),
             (4, 8192, 64, 8192),
             (4, 8192, 128, 8192),
             (4, 8192, 256, 8192),
             (4, 8192, 512, 8192),
             (4, 8192, 1024, 8192),
             (4, 8192, 2048, 8192),
             (4, 8192, 4096, 8192),
             (4, 8192, 8192, 8192),
             (16, 32, 32, 32),
             (16, 32, 64, 32),
             (16, 32, 128, 32),
             (16, 32, 256, 32),
             (16, 32, 512, 32),
             (16, 32, 1024, 32),
             (16, 32, 2048, 32),
             (16, 64, 32, 64),
             (16, 64, 64, 64),
             (16, 64, 128, 64),
             (16, 64, 256, 64),
             (16, 64, 512, 64),
             (16, 64, 1024, 64),
             (16, 64, 2048, 64),
             (16, 128, 32, 128),
             (16, 128, 64, 128),
             (16, 128, 128, 128),
             (16, 128, 256, 128),
             (16, 128, 512, 128),
             (16, 128, 1024, 128),
             (16, 128, 2048, 128),
             (16, 256, 32, 256),
             (16, 256, 64, 256),
             (16, 256, 128, 256),
             (16, 256, 256, 256),
             (16, 256, 512, 256),
             (16, 256, 1024, 256),
             (16, 256, 2048, 256),
             (16, 512, 32, 512),
             (16, 512, 64, 512),
             (16, 512, 128, 512),
             (16, 512, 256, 512),
             (16, 512, 512, 512),
             (16, 512, 1024, 512),
             (16, 512, 2048, 512),
             (16, 1024, 32, 1024),
             (16, 1024, 64, 1024),
             (16, 1024, 128, 1024),
             (16, 1024, 256, 1024),
             (16, 1024, 512, 1024),
             (16, 1024, 1024, 1024),
             (16, 1024, 2048, 1024),
             (16, 2048, 32, 2048),
             (16, 2048, 64, 2048),
             (16, 2048, 128, 2048),
             (16, 2048, 256, 2048),
             (16, 2048, 512, 2048),
             (16, 2048, 1024, 2048),
             (16, 2048, 2048, 2048),
             (256, 32, 32, 32),
             (256, 32, 64, 32),
             (256, 32, 128, 32),
             (256, 32, 256, 32),
             (256, 32, 512, 32),
             (256, 32, 1024, 32),
             (256, 32, 2048, 32),
             (256, 64, 32, 64),
             (256, 64, 64, 64),
             (256, 64, 128, 64),
             (256, 64, 256, 64),
             (256, 64, 512, 64),
             (256, 64, 1024, 64),
             (256, 64, 2048, 64),
             (256, 128, 32, 128),
             (256, 128, 64, 128),
             (256, 128, 128, 128),
             (256, 128, 256, 128),
             (256, 128, 512, 128),
             (256, 128, 1024, 128),
             (256, 128, 2048, 128),
             (256, 256, 32, 256),
             (256, 256, 64, 256),
             (256, 256, 128, 256),
             (256, 256, 256, 256),
             (256, 256, 512, 256),
             (256, 256, 1024, 256),
             (256, 256, 2048, 256),
             (256, 512, 32, 512),
             (256, 512, 64, 512),
             (256, 512, 128, 512),
             (256, 512, 256, 512),
             (256, 512, 512, 512),
             (256, 512, 1024, 512),
             (256, 512, 2048, 512),
             (256, 1024, 32, 1024),
             (256, 1024, 64, 1024),
             (256, 1024, 128, 1024),
             (256, 1024, 256, 1024),
             (256, 1024, 512, 1024),
             (256, 1024, 1024, 1024),]

n_trials = 50

# jax.profiler.start_trace("./tensorboard")

result_dict = {}

# with jax.profiler.StepTraceAnnotation("train", step_num=0):
for gemm in gemm_list:
    print(f"Current gemm for b={gemm[0]},m={gemm[1]},k={gemm[2]},n={gemm[3]}")
    key = jax.random.PRNGKey(0)
    b = gemm[0]
    m = gemm[1]
    k = gemm[2]
    n = gemm[3]

    # with jax.profiler.TraceAnnotation(f"b={b},m={m},k={k},n={n}"):
    trial_list = []
    for i in range(n_trials):
      A = jax.random.normal(key, (b, m, k), dtype=np.float32)
      B = jax.random.normal(key, (b, k, n), dtype=np.float32)
      print(jax.device_put(A, jax.devices()[0]).device_buffer.device())
      jax.device_put(B, jax.devices()[0])

      A.block_until_ready()
      B.block_until_ready()
      start = time.time()

      # Run the operations to be profiled
      C = jax.lax.batch_matmul(A, B)
      C.block_until_ready()
      end = time.time()

      trial_list += [end - start]

    result_dict[gemm] = trial_list

with open("./result.csv", "w") as f:
  print("b,m,k,n,avg_time(ms),stdev")
  f.write("b,m,k,n,avg_time(ms)stdev\n")

  for gemm in gemm_list:
    print(f"{gemm[0]},{gemm[1]},{gemm[2]},{gemm[3]},{sum(result_dict[gemm][3:])/len(result_dict[gemm][3:])*1000:.3f},{statistics.stdev(result_dict[gemm][10:])*1000:.3f}")
    f.write(f"{gemm[0]},{gemm[1]},{gemm[2]},{gemm[3]},{sum(result_dict[gemm][3:])/len(result_dict[gemm][3:])*1000},{statistics.stdev(result_dict[gemm][10:])*1000:.3f}\n")

# jax.profiler.stop_trace()
